import { AxiosRequestConfig, AxiosInstance, Method } from 'axios';
import { CookieAttributes } from 'js-cookie';

declare type StrapiAuthProvider = "github" | "facebook" | "google" | "cognito" | "twitter" | "discord" | "twitch" | "instagram" | "vk" | "linkedin" | "reddit" | "auth0";
declare type StrapiLocale = "af" | "af-NA" | "af-ZA" | "agq" | "agq-CM" | "ak" | "ak-GH" | "sq" | "sq-AL" | "am" | "am-ET" | "ar" | "ar-DZ" | "ar-BH" | "ar-EG" | "ar-IQ" | "ar-JO" | "ar-KW" | "ar-LB" | "ar-LY" | "ar-MA" | "ar-OM" | "ar-QA" | "ar-SA" | "ar-SD" | "ar-SY" | "ar-TN" | "ar-AE" | "ar-001" | "ar-YE" | "hy" | "hy-AM" | "as" | "as-IN" | "asa" | "asa-TZ" | "az" | "az-Cyrl" | "az-Cyrl-AZ" | "az-Latn" | "az-Latn-AZ" | "ksf" | "ksf-CM" | "bm" | "bm-ML" | "bas" | "bas-CM" | "eu" | "eu-ES" | "be" | "be-BY" | "bem" | "bem-ZM" | "bez" | "bez-TZ" | "bn" | "bn-BD" | "bn-IN" | "brx" | "brx-IN" | "bs" | "bs-BA" | "br" | "br-FR" | "bg" | "bg-BG" | "my" | "my-MM" | "ca" | "ca-ES" | "ckb" | "tzm" | "tzm-Latn" | "tzm-Latn-MA" | "chr" | "chr-US" | "cgg" | "cgg-UG" | "zh" | "zh-Hans" | "zh-CN" | "zh-Hans-CN" | "zh-Hans-HK" | "zh-Hans-MO" | "zh-Hans-SG" | "zh-Hant" | "zh-Hant-HK" | "zh-Hant-MO" | "zh-Hant-TW" | "swc" | "swc-CD" | "kw" | "kw-GB" | "hr" | "hr-HR" | "cs" | "cs-CZ" | "da" | "da-DK" | "dua" | "dua-CM" | "nl" | "nl-AW" | "nl-BE" | "nl-CW" | "nl-NL" | "nl-SX" | "ebu" | "ebu-KE" | "en" | "en-AS" | "en-AU" | "en-BB" | "en-BE" | "en-BZ" | "en-BM" | "en-BW" | "en-CA" | "en-EG" | "en-EU" | "en-GU" | "en-GY" | "en-HK" | "en-IN" | "en-IE" | "en-JM" | "en-MT" | "en-MH" | "en-MU" | "en-NA" | "en-NZ" | "en-MP" | "en-PK" | "en-PH" | "en-SA" | "en-SG" | "en-ZA" | "en-TT" | "en-AE" | "en-UM" | "en-VI" | "en-US-POSIX" | "en-GB" | "en-US" | "en-ZW" | "eo" | "et" | "et-EE" | "ee" | "ee-GH" | "ee-TG" | "ewo" | "ewo-CM" | "fo" | "fo-FO" | "fil" | "fil-PH" | "fi" | "fi-FI" | "fr" | "fr-BE" | "fr-BJ" | "fr-BF" | "fr-BI" | "fr-CM" | "fr-CA" | "fr-CF" | "fr-TD" | "fr-KM" | "fr-CG" | "fr-CD" | "fr-CI" | "fr-DJ" | "fr-GQ" | "fr-FR" | "fr-GF" | "fr-GA" | "fr-GP" | "fr-GN" | "fr-LU" | "fr-MG" | "fr-ML" | "fr-MQ" | "fr-YT" | "fr-MC" | "fr-NE" | "fr-RW" | "fr-RE" | "fr-BL" | "fr-MF" | "fr-SN" | "fr-CH" | "fr-TG" | "ff" | "ff-SN" | "gl" | "gl-ES" | "lg" | "lg-UG" | "ka" | "ka-GE" | "de" | "de-AT" | "de-BE" | "de-DE" | "de-LI" | "de-LU" | "de-CH" | "el" | "el-CY" | "el-GR" | "gu" | "gu-IN" | "guz" | "guz-KE" | "ha" | "ha-Latn" | "ha-Latn-GH" | "ha-Latn-NE" | "ha-Latn-NG" | "haw" | "haw-US" | "he" | "he-IL" | "hi" | "hi-IN" | "hu" | "hu-HU" | "is" | "is-IS" | "ig" | "ig-NG" | "id" | "id-ID" | "ga" | "ga-IE" | "it" | "it-IT" | "it-CH" | "ja" | "ja-JP" | "dyo" | "dyo-SN" | "kea" | "kea-CV" | "kab" | "kab-DZ" | "kl" | "kl-GL" | "kln" | "kln-KE" | "kam" | "kam-KE" | "kn" | "kn-IN" | "kk" | "kk-Cyrl" | "kk-Cyrl-KZ" | "km" | "km-KH" | "ki" | "ki-KE" | "rw" | "rw-RW" | "kok" | "kok-IN" | "ko" | "ko-KR" | "khq" | "khq-ML" | "ses" | "ses-ML" | "nmg" | "nmg-CM" | "lag" | "lag-TZ" | "lv" | "lv-LV" | "ln" | "ln-CG" | "ln-CD" | "lt" | "lt-LT" | "lu" | "lu-CD" | "luo" | "luo-KE" | "luy" | "luy-KE" | "mk" | "mk-MK" | "jmc" | "jmc-TZ" | "mgh" | "mgh-MZ" | "kde" | "kde-TZ" | "mg" | "mg-MG" | "ms" | "ms-BN" | "ms-MY" | "ml" | "ml-IN" | "mt" | "mt-MT" | "gv" | "gv-GB" | "mr" | "mr-IN" | "mas" | "mas-KE" | "mas-TZ" | "mer" | "mer-KE" | "mfe" | "mfe-MU" | "mua" | "mua-CM" | "naq" | "naq-NA" | "ne" | "ne-IN" | "ne-NP" | "nd" | "nd-ZW" | "nb" | "nb-NO" | "nn" | "nn-NO" | "nus" | "nus-SD" | "nyn" | "nyn-UG" | "or" | "or-IN" | "om" | "om-ET" | "om-KE" | "ps" | "ps-AF" | "fa" | "fa-AF" | "fa-IR" | "pl" | "pl-PL" | "pt" | "pt-AO" | "pt-BR" | "pt-GW" | "pt-MZ" | "pt-PT" | "pt-ST" | "pa" | "pa-Arab" | "pa-Arab-PK" | "pa-Guru" | "pa-Guru-IN" | "ro" | "ro-MD" | "ro-RO" | "rm" | "rm-CH" | "rof" | "rof-TZ" | "rn" | "rn-BI" | "ru" | "ru-MD" | "ru-RU" | "ru-UA" | "rwk" | "rwk-TZ" | "saq" | "saq-KE" | "sg" | "sg-CF" | "sbp" | "sbp-TZ" | "seh" | "seh-MZ" | "sr" | "sr-Cyrl" | "sr-Cyrl-BA" | "sr-Cyrl-ME" | "sr-Cyrl-RS" | "sr-Latn" | "sr-Latn-BA" | "sr-Latn-ME" | "sr-Latn-RS" | "ksb" | "ksb-TZ" | "sn" | "sn-ZW" | "ii" | "ii-CN" | "si" | "si-LK" | "sk" | "sk-SK" | "sl" | "sl-SI" | "xog" | "xog-UG" | "so" | "so-DJ" | "so-ET" | "so-KE" | "so-SO" | "es" | "es-AR" | "es-BO" | "es-CL" | "es-CO" | "es-CR" | "es-DO" | "es-EC" | "es-SV" | "es-GQ" | "es-GT" | "es-HN" | "es-419" | "es-MX" | "es-NI" | "es-PA" | "es-PY" | "es-PE" | "es-PR" | "es-ES" | "es-US" | "es-UY" | "es-VE" | "sw" | "sw-KE" | "sw-TZ" | "sv" | "sv-FI" | "sv-SE" | "gsw" | "gsw-CH" | "shi" | "shi-Latn" | "shi-Latn-MA" | "shi-Tfng" | "shi-Tfng-MA" | "dav" | "dav-KE" | "ta" | "ta-IN" | "ta-LK" | "twq" | "twq-NE" | "te" | "te-IN" | "teo" | "teo-KE" | "teo-UG" | "th" | "th-TH" | "bo" | "bo-CN" | "bo-IN" | "ti" | "ti-ER" | "ti-ET" | "to" | "to-TO" | "tr" | "tr-TR" | "uk" | "uk-UA" | "ur" | "ur-IN" | "ur-PK" | "uz" | "uz-Arab" | "uz-Arab-AF" | "uz-Cyrl" | "uz-Cyrl-UZ" | "uz-Latn" | "uz-Latn-UZ" | "vai" | "vai-Latn" | "vai-Latn-LR" | "vai-Vaii" | "vai-Vaii-LR" | "vi" | "vi-VN" | "vun" | "vun-TZ" | "cy" | "cy-GB" | "yav" | "yav-CM" | "yo" | "yo-NG" | "dje" | "dje-NE" | "zu" | "zu-ZA";
interface StoreConfig {
    key: string;
    useLocalStorage?: boolean;
    cookieOptions?: CookieAttributes;
}
interface StrapiOptions {
    url?: string;
    prefix?: string;
    store?: StoreConfig;
    axiosOptions?: AxiosRequestConfig;
}
interface StrapiDefaultOptions {
    url: string;
    prefix: string;
    store: StoreConfig;
    axiosOptions: AxiosRequestConfig;
}
declare type StrapiUser = Record<string, unknown> | null;
interface PaginationByPage {
    page: number;
    pageSize: number;
    withCount?: boolean;
}
interface PaginationByOffset {
    start: number;
    limit: number;
    withCount?: boolean;
}
interface StrapiBaseRequestParams {
    fields?: Array<string>;
    populate?: string | Array<string> | Record<string, unknown>;
}
interface StrapiRequestParams extends StrapiBaseRequestParams {
    sort?: string | Array<string>;
    pagination?: PaginationByOffset | PaginationByPage;
    filters?: Record<string, unknown>;
    publicationState?: "live" | "preview";
    locale?: StrapiLocale;
}
interface StrapiError {
    data: null;
    error: {
        status: number;
        name: string;
        message: string;
        details: Record<string, unknown>;
    };
}
interface StrapiResponse<T> {
    data: T;
    meta: Record<string, unknown>;
}
interface StrapiAuthenticationResponse {
    user: Record<string, unknown>;
    jwt: string;
}
interface StrapiAuthenticationData {
    identifier: string;
    password: string;
}
interface StrapiRegistrationData {
    username: string;
    email: string;
    password: string;
}
interface StrapiForgotPasswordData {
    email: string;
}
interface StrapiResetPasswordData {
    code: string;
    password: string;
    passwordConfirmation: string;
}
interface StrapiEmailConfirmationData {
    email: string;
}

declare class Strapi {
    axios: AxiosInstance;
    options: StrapiDefaultOptions;
    user: StrapiUser;
    /**
     * Strapi SDK Constructor
     *
     * @constructor
     * @param {StrapiOptions} options? - Options in order to configure API URL, list your Content Types & extend the axios configuration
     * @param {string} options.url? - Your Strapi API URL, Default: http://localhost::1337
     * @param {StoreConfig} options.store? - Config the way you want to store JWT (Cookie or LocalStorage)
     * @param {AxiosRequestConfig} options.axiosOptions? - The list of your Content type on your Strapi API
     */
    constructor(options?: StrapiOptions);
    /**
     * Basic axios request
     *
     * @param  {Method} method - HTTP method
     * @param  {string} url - Custom or Strapi API URL
     * @param  {AxiosRequestConfig} axiosConfig? - Custom Axios config
     * @returns Promise<T>
     */
    request<T>(method: Method, url: string, axiosConfig?: AxiosRequestConfig): Promise<T>;
    /**
     * Authenticate user & retrieve his JWT
     *
     * @param  {StrapiAuthenticationData} data - User authentication form data: `identifier`, `password`
     * @param  {string} data.identifier - The email or username of the user
     * @param  {string} data.password - The password of the user
     * @returns Promise<StrapiAuthenticationResponse>
     */
    login(data: StrapiAuthenticationData): Promise<StrapiAuthenticationResponse>;
    /**
     * Register a new user & retrieve JWT
     *
     * @param  {StrapiRegistrationData} data - New user registration data: `username`, `email`, `password`
     * @param  {string} data.username - Username of the new user
     * @param  {string} data.email - Email of the new user
     * @param  {string} data.password - Password of the new user
     * @returns Promise<StrapiAuthenticationResponse>
     */
    register(data: StrapiRegistrationData): Promise<StrapiAuthenticationResponse>;
    /**
     * Send an email to a user in order to reset his password
     *
     * @param  {StrapiForgotPasswordData} data - Forgot password data: `email`
     * @param  {string} data.email - Email of the user who forgot his password
     * @returns Promise<void>
     */
    forgotPassword(data: StrapiForgotPasswordData): Promise<void>;
    /**
     * Reset the user password
     *
     * @param  {StrapiResetPasswordData} data - Reset password data object: `code`, `password`, `passwordConfirmation`
     * @param  {string} data.code - Code received by email after calling the `forgotPassword` method
     * @param  {string} data.password - New password of the user
     * @param  {string} data.passwordConfirmation - Confirmation of the new password of the user
     * @returns Promise<StrapiAuthenticationResponse>
     */
    resetPassword(data: StrapiResetPasswordData): Promise<StrapiAuthenticationResponse>;
    /**
     * Send programmatically an email to a user in order to confirm his account
     *
     * @param  {StrapiEmailConfirmationData} data - Email confirmation data: `email`
     * @param  {string} data.email - Email of the user who want to be confirmed
     * @returns Promise<void>
     */
    sendEmailConfirmation(data: StrapiEmailConfirmationData): Promise<void>;
    /**
     * Get the correct URL to authenticate with provider
     *
     * @param  {StrapiAuthProvider} provider - Provider name
     * @returns string
     */
    getProviderAuthenticationUrl(provider: StrapiAuthProvider): string;
    /**
     * Authenticate user with the token present on the URL or in `params`
     *
     * @param  {StrapiAuthProvider} provider - Provider name
     * @param  {string} access_token? - Access Token return from Strapi
     * @returns Promise<StrapiAuthenticationResponse>
     */
    authenticateProvider(provider: StrapiAuthProvider, access_token?: string): Promise<StrapiAuthenticationResponse>;
    /**
     * Logout by removing authentication token
     *
     * @returns void
     */
    logout(): void;
    /**
     * Get a list of {content-type} entries
     *
     * @param  {string} contentType - Content type's name pluralized
     * @param  {StrapiRequestParams} params? - Query parameters
     * @returns Promise<StrapiResponse<T>>
     */
    find<T>(contentType: string, params?: StrapiRequestParams): Promise<StrapiResponse<T>>;
    /**
     * Get a specific {content-type} entry
     *
     * @param  {string} contentType - Content type's name pluralized
     * @param  {string|number} id - ID of entry
     * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
     * @returns Promise<StrapiResponse<T>>
     */
    findOne<T>(contentType: string, id: string | number, params?: StrapiBaseRequestParams): Promise<StrapiResponse<T>>;
    /**
     * Create a {content-type} entry
     *
     * @param  {string} contentType - Content type's name pluralized
     * @param  {AxiosRequestConfig["data"]} data - New entry
     * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
     * @returns Promise<StrapiResponse<T>>
     */
    create<T>(contentType: string, data: AxiosRequestConfig["data"], params?: StrapiBaseRequestParams): Promise<StrapiResponse<T>>;
    /**
     * Update a specific entry
     *
     * @param  {string} contentType - Content type's name pluralized
     * @param  {string|number} id - ID of entry to be updated
     * @param  {AxiosRequestConfig["data"]} data - New entry data
     * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
     * @returns Promise<StrapiResponse<T>>
     */
    update<T>(contentType: string, id: string | number, data: AxiosRequestConfig["data"], params?: StrapiBaseRequestParams): Promise<StrapiResponse<T>>;
    /**
     * Delete en entry
     *
     * @param  {string} contentType - Content type's name pluralized
     * @param  {string|number} id - ID of entry to be deleted
     * @param  {StrapiBaseRequestParams} params? - Fields selection & Relations population
     * @returns Promise<StrapiResponse<T>>
     */
    delete<T>(contentType: string, id: string | number, params?: StrapiBaseRequestParams): Promise<StrapiResponse<T>>;
    /**
     * Refresh local data of the logged-in user
     *
     * @returns Promise<StrapiUser>
     */
    fetchUser(): Promise<StrapiUser>;
    /**
     * Retrieve token from chosen storage
     *
     * @returns string | null
     */
    getToken(): string | null;
    /**
     * Set token in chosen storage
     *
     * @param  {string} token - Token retrieve from login or register method
     * @returns void
     */
    setToken(token: string): void;
    /**
     * Remove token from chosen storage (Cookies or Local)
     *
     * @returns void
     */
    removeToken(): void;
}

export { PaginationByOffset, PaginationByPage, StoreConfig, StrapiAuthProvider, StrapiAuthenticationData, StrapiAuthenticationResponse, StrapiBaseRequestParams, StrapiDefaultOptions, StrapiEmailConfirmationData, StrapiError, StrapiForgotPasswordData, StrapiLocale, StrapiOptions, StrapiRegistrationData, StrapiRequestParams, StrapiResetPasswordData, StrapiResponse, StrapiUser, Strapi as default };

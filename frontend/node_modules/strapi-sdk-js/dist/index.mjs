import axios from 'axios';
import defu from 'defu';
import qs from 'qs';
import Cookies from 'js-cookie';

function isBrowser() {
  return typeof window !== "undefined";
}

const defaults = {
  url: "http://localhost:1337",
  prefix: "/api",
  store: {
    key: "strapi_jwt",
    useLocalStorage: false,
    cookieOptions: { path: "/" }
  },
  axiosOptions: {}
};
class Strapi {
  constructor(options) {
    this.user = null;
    this.options = defu(options || {}, defaults);
    this.axios = axios.create({
      baseURL: new URL(this.options.prefix, this.options.url).href,
      paramsSerializer: qs.stringify,
      ...this.options.axiosOptions
    });
    this.axios.interceptors.request.use((config) => {
      const token = this.getToken();
      if (token) {
        config.headers = {
          ...config.headers,
          Authorization: `Bearer ${token}`
        };
      }
      return config;
    });
  }
  async request(method, url, axiosConfig) {
    try {
      const response = await this.axios.request({
        method,
        url,
        ...axiosConfig
      });
      return response.data;
    } catch (error) {
      const e = error;
      if (!e.response) {
        throw {
          data: null,
          error: {
            status: 500,
            name: "UnknownError",
            message: e.message,
            details: e
          }
        };
      } else {
        throw e.response.data;
      }
    }
  }
  async login(data) {
    this.removeToken();
    const { user, jwt } = await this.request("post", "/auth/local", {
      data
    });
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  async register(data) {
    this.removeToken();
    const { user, jwt } = await this.request("post", "/auth/local/register", {
      data
    });
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  async forgotPassword(data) {
    this.removeToken();
    return this.request("post", "/auth/forgot-password", { data });
  }
  async resetPassword(data) {
    this.removeToken();
    const { user, jwt } = await this.request("post", "/auth/reset-password", {
      data
    });
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  async sendEmailConfirmation(data) {
    return this.request("post", "/auth/send-email-confirmation", {
      data
    });
  }
  getProviderAuthenticationUrl(provider) {
    return new URL(`/connect/${provider}`, this.options.url).href;
  }
  async authenticateProvider(provider, access_token) {
    this.removeToken();
    if (isBrowser()) {
      const params = qs.parse(window.location.search, {
        ignoreQueryPrefix: true
      });
      if (params.access_token)
        access_token = params.access_token;
    }
    const { user, jwt } = await this.request("get", `/auth/${provider}/callback`, {
      params: { access_token }
    });
    this.setToken(jwt);
    this.user = user;
    return { user, jwt };
  }
  logout() {
    this.user = null;
    this.removeToken();
  }
  find(contentType, params) {
    return this.request("get", `/${contentType}`, {
      params
    });
  }
  findOne(contentType, id, params) {
    return this.request("get", `/${contentType}/${id}`, {
      params
    });
  }
  create(contentType, data, params) {
    return this.request("post", `/${contentType}`, {
      data: { data },
      params
    });
  }
  update(contentType, id, data, params) {
    return this.request("put", `/${contentType}/${id}`, {
      data: { data },
      params
    });
  }
  delete(contentType, id, params) {
    return this.request("delete", `/${contentType}/${id}`, {
      params
    });
  }
  async fetchUser() {
    try {
      const user = await this.request("get", "/users/me");
      this.user = user;
    } catch (e) {
      this.logout();
    }
    return this.user;
  }
  getToken() {
    const { useLocalStorage, key } = this.options.store;
    if (isBrowser()) {
      const token = useLocalStorage ? window.localStorage.getItem(key) : Cookies.get(key);
      if (typeof token === "undefined")
        return null;
      return token;
    }
    return null;
  }
  setToken(token) {
    const { useLocalStorage, key, cookieOptions } = this.options.store;
    if (isBrowser()) {
      useLocalStorage ? window.localStorage.setItem(key, token) : Cookies.set(key, token, cookieOptions);
    }
  }
  removeToken() {
    const { useLocalStorage, key } = this.options.store;
    if (isBrowser()) {
      useLocalStorage ? window.localStorage.removeItem(key) : Cookies.remove(key);
    }
  }
}

export { Strapi as default };
